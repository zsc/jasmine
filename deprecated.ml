(*  match                                                           *)
(*    (match timedExec 0.2 "arp `hostname` -c 1 2>/dev/null" () with*)
(*          | Some (s::_) ->                                        *)
(*            let re = Str.regexp "[^(]*(\\([^)]*\\)).*" in         *)
(*            if (Str.string_match re s 0) then                     *)
(*              Some (Str.matched_group 1 s)                        *)
(*            else None                                             *)
(*          | _ -> None)                                            *)
(*  with                                                            *)
(*    | Some ip -> ip                                               *)
(*    | None ->                                                     *)
(*        (match timedExec 0.2 "ping `hostname` -c 1" () with         *)
(*          | Some (s::_) ->                                          *)
(*            let re = Str.regexp "[^(]*(\\([^)]*\\)).*" in           *)
(*            if (Str.string_match re s 0) then                       *)
(*              Str.matched_group 1 s                                 *)
(*            else raise Exit                                         *)
(*          | _ -> raise Exit)                                        *)

(*let buffer zs f =                                                     *)
(*  def state(xs,ys,_::zs) & put(x) = state(x::xs,ys,zs) & reply to put *)
(*  or state(xs,y::ys,zs) & get() = state(xs,ys,()::zs) & reply y to get*)
(*  or state((_::_)as xs,[],zs) = state([],List.rev xs,zs) in           *)
(*  spawn state([],[],zs);                                              *)
(*  fun x ->                                                            *)
(*    put(x)                                                            *)
